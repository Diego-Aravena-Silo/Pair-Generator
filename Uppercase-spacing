import vanilla

# Initialize an empty dictionary
my_dict = {}

# First, group glyphs by category and subcategory
for glyph in Glyphs.font.glyphs:
    category = glyph.category
    subcategory = glyph.subCategory
    unicode = glyph.unicode  # Assuming there is a unicode attribute
    glyph_name = glyph.name

    # Check if the category key already exists in the dictionary
    if category not in my_dict:
        my_dict[category] = {}  # Initialize a new dictionary for this category if it doesn't exist

    # Check if the subcategory key already exists in the category dictionary
    if subcategory not in my_dict[category]:
        my_dict[category][subcategory] = {}  # Initialize a new dictionary for this subcategory if it doesn't exist

    # Check if the unicode key already exists in the subcategory dictionary
    if unicode not in my_dict[category][subcategory]:
        my_dict[category][subcategory][unicode] = []  # Initialize a new list for this unicode if it doesn't exist

    # Append the glyph name to the appropriate list
    my_dict[category][subcategory][unicode].append(glyph_name)

try:
    if 'Letter' in my_dict and None in my_dict['Letter']:
        letter_values = my_dict['Letter'][None].values()
        UPPERCASES = [item for sublist in letter_values for item in sublist if item.isupper() and len(item) == 1]
        LOWERCASES = [item for sublist in letter_values for item in sublist if item.islower() and len(item) == 1]
    else:
        UPPERCASES, LOWERCASES = [], []

    if 'Symbol' in my_dict and 'Currency' in my_dict['Symbol']:
        currency_unicode = my_dict['Symbol']['Currency'].keys()
        CURRENCIES = [chr(int(code, 16)) for code in currency_unicode if code != None]
    else:
        CURRENCIES = []

    if 'Number' in my_dict and 'Decimal Digit' in my_dict['Number']:
        figure_unicodes = my_dict['Number']['Decimal Digit'].keys()
        FIGURES = [chr(int(code, 16)) for code in figure_unicodes if code != None and "00" in code]
    else:
        FIGURES = []

    if 'Punctuation' in my_dict and None in my_dict['Punctuation']:
        first_group_unicodes = my_dict['Punctuation'][None].keys()
        FIRST_GROUP_PUNCTUATIONS = [chr(int(code, 16)) for code in first_group_unicodes if code != None]
        if "/" in FIRST_GROUP_PUNCTUATIONS:
            FIRST_GROUP_PUNCTUATIONS = ['//' if item == '/' else item for item in FIRST_GROUP_PUNCTUATION]
    else:
        FIRST_GROUP_PUNCTUATIONS = []

    if 'Punctuation' in my_dict and 'Quote' in my_dict['Punctuation']:
        second_group_unicodes = my_dict['Punctuation']['Quote'].keys()
        SECOND_GROUP_PUNCTUATIONS = [chr(int(code, 16)) for code in second_group_unicodes if code != None]
    else:
        SECOND_GROUP_PUNCTUATIONS = []
 
    if 'Punctuation' in my_dict and 'Parenthesis' in my_dict['Punctuation']:
        third_group_unicodes = my_dict['Punctuation']['Parenthesis'].keys()
        THIRD_GROUP_PUNCTUATIONS = [chr(int(code, 16)) for code in third_group_unicodes if code != None]
    else:
        THIRD_GROUP_PUNCTUATIONS = []

    if 'Punctuation' in my_dict and 'Dash' in my_dict['Punctuation']:
        fourth_group_unicodes = my_dict['Punctuation']['Dash'].keys()
        FOURTH_GROUP_PUNCTUATIONS = [chr(int(code, 16)) for code in fourth_group_unicodes if code != None]
    else:
        FOURTH_GROUP_PUNCTUATIONS = []

    if 'Symbol' in my_dict and None in my_dict['Symbol']:
        symbol_unicodes = my_dict["Symbol"][None].keys()
        SYMBOLS = [chr(int(code, 16)) for code in symbol_unicodes if code != None]
    else:
        SYMBOLS = []

    if 'Symbol' in my_dict and 'Math' in my_dict['Symbol']:
        math_unicodes = my_dict['Symbol']['Math'].keys()
        MATH_SYMBOLS = [chr(int(code, 16)) for code in math_unicodes if code != None]
    else:
        MATH_SYMBOLS = []

except KeyError as e:
    print(f"Key error: {e}")
    UPPERCASES, LOWERCASES, CURRENCIES, FIGURES, FIRST_GROUP_PUNCTUATIONS, SECOND_GROUP_PUNCTUATIONS, THIRD_GROUP_PUNCTUATIONS, FOURTH_GROUP_PUNCTUATIONS, SYMBOLS, MATH_SYMBOLS = [], [], [], [], [], [], [], [], [], []


class SpacingPairs:

    def __init__(self):
        self.windowWidth = 333
        self.windowHeight = 145
        self.windowWidthResize = 100  # user can resize width by this value
        self.windowHeightResize = 100  # user can resize height by this value

        self.w = vanilla.FloatingWindow(
            (self.windowWidth, self.windowHeight),  # default window size
            "Pairs Generator",  # window title
            minSize=(self.windowWidth, self.windowHeight),  # minimum size
            maxSize=(self.windowWidth + self.windowWidthResize, self.windowHeight + self.windowHeightResize),  # maximum size
        )

        # UI elements:
        self.w.uppercase = vanilla.CheckBox(
            (15, 15, 75, 22), "Uppercase", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.lowercase = vanilla.CheckBox(
            (100, 15, 75, 22), "Lowercase", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.number = vanilla.CheckBox(
            (185, 15, 75, 22), "Number", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.currency = vanilla.CheckBox(
            (253, 15, 75, 22), "Currency", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.allUpper = vanilla.CheckBox(
            (15, 40, 90, 22), "All Uppercase", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.allLower = vanilla.CheckBox(
            (118, 40, 90, 22), "All Lowercase", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.UppervsLower = vanilla.CheckBox(
            (220, 40, 100, 22), "Upper vs Lower", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.Punctuation = vanilla.CheckBox(
            (15, 66, 115, 22), "Punctuation", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.Symbol = vanilla.CheckBox(
            (145, 66, 125, 22), "Symbol", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.All = vanilla.CheckBox(
            (285, 66, 60, 22), "All", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.pairsButton = vanilla.Button(
            (10, 100, -10, 22), "Generate", sizeStyle="regular", callback=self.button_callback
        )

        self.w.open()  # Open the window
        self.w.makeKey()  # Focus on window

    def checkbox_callback(self, sender):
        # This function can be used to handle checkbox state changes if needed
        if self.w.All.get():
            self.w.uppercase.set(True)
            self.w.lowercase.set(True)
            self.w.number.set(True)
            self.w.currency.set(True)
            self.w.allUpper.set(True)
            self.w.allLower.set(True)
            self.w.UppervsLower.set(True)
            self.w.Punctuation.set(True)
            self.w.Symbol.set(True)

    def button_callback(self, sender):
        # This method is called when the button is pressed.
        if self.w.uppercase.get():
            self.uppercase_spacing()
            self.w.uppercase.set(False)
        if self.w.lowercase.get():
            self.lowercase_spacing()
            self.w.lowercase.set(False)
        if self.w.number.get():
            self.figure_spacing()
            self.w.number.set(False)
        if self.w.currency.get():
            self.currency_spacing()
            self.w.currency.set(False)
        if self.w.allUpper.get():
            self.all_uppercase_spacing()
            self.w.allUpper.set(False)
        if self.w.allLower.get():
            self.all_lowercase_spacing()
            self.w.allLower.set(False)
        if self.w.UppervsLower.get():
            self.upper_lower()
            self.w.UppervsLower.set(False)
        if self.w.Punctuation.get():
            self.punctuation()
            self.w.Punctuation.set(False)
        if self.w.Symbol.get():
            self.symbol()
            self.w.Symbol.set(False)
        if self.w.All.get():
            self.w.All.set(False)

    # Functions:
    def uppercase_spacing(self):
        if UPPERCASES == []:
            pass
        else:
            # Concatenate all results into a single string
            result_string = "\n".join(["HH" + uppercase + "HH"+ " " "OO" + uppercase + "OO" for uppercase in UPPERCASES])

            Font.newTab(result_string)

    def lowercase_spacing(self):
        if LOWERCASES == []:
            pass
        else:
            # Concatenate all results into a single string
            result_string = "\n".join(["nn" + lowercase + "nn"+ " " "oo" + lowercase + "oo" for lowercase in LOWERCASES])

            Font.newTab(result_string)

    def figure_spacing(self):
        if FIGURES == []:
            pass
        else:
            # Generate a formatted string for each figure by concatenating it with every digit from 1 to 9
            result_string = "\n".join(["".join(figure + str(num) for num in range(0, 10)) for figure in FIGURES])

            # Display the result string in a new font tab
            Font.newTab(result_string)

    def currency_spacing(self):
        if CURRENCIES == []:
            pass
        else:
            figure_order = ["12","23","34","45","56","65","78","89","90","01"]
            # Concatenate all results into a single string
            result_string = "\n".join(
            ["".join(figure + currency + " " for figure in figure_order) if currency == "\u00A2"
            else "".join(currency + figure + " " for figure in figure_order) for currency in CURRENCIES]
            )

            # Display the result string in a new tab
            Font.newTab(result_string)

    def all_uppercase_spacing(self):
        if UPPERCASES == []:
            pass
        else:
            # Generate the result string using nested comprehensions
            result_string = "\n".join(["".join(uppercase + other for other in UPPERCASES) for uppercase in UPPERCASES])

            # Display the result in a new font tab
            Font.newTab(result_string)

    def all_lowercase_spacing(self):
        if LOWERCASES == []:
            pass
        else:
            # Generate the result string using nested comprehensions
            result_string = "\n".join(["".join(lowercase + other for other in LOWERCASES) for lowercase in LOWERCASES])

            Font.newTab(result_string)

    def upper_lower(self):
        if UPPERCASES == [] or LOWERCASES == []:
            pass
        else:
            # Initialize an empty string to hold all combinations
            all_combinations = ""

            # Create a combined string for each uppercase letter and append it to all_combinations
            for uppercase in UPPERCASES:
                combined_string = "".join([uppercase + lowercase + "nnon " for lowercase in LOWERCASES])
                all_combinations += combined_string + "\n"  # Add a newline for each uppercase block

            # Open a new tab with all the combinations
            Font.newTab(all_combinations)

    def punctuation(self):
        if FIRST_GROUP_PUNCTUATIONS == [] and SECOND_GROUP_PUNCTUATIONS == [] and THIRD_GROUP_PUNCTUATIONS == []:
            pass
        else:
            # Generate the result string using nested comprehensions
            if "." in FIRST_GROUP_PUNCTUATIONS:
                result_string_upper = "\n".join(
                    ["".join(punctuation + uppercase for uppercase in UPPERCASES) + punctuation for punctuation in FIRST_GROUP_PUNCTUATIONS if punctuation == "."]
                )
                result_string_lower = "\n".join(
                    ["".join(punctuation + lowercase for lowercase in LOWERCASES) + punctuation for punctuation in FIRST_GROUP_PUNCTUATIONS if punctuation == "."]
                )
                concatenated_string = result_string_upper + "\n" + result_string_lower + "\n"
            else:
                concatenated_string = ""
    
            if "," in FIRST_GROUP_PUNCTUATIONS:
                result_string_upper = "\n".join(
                    ["".join(punctuation + uppercase for uppercase in UPPERCASES) + punctuation for punctuation in FIRST_GROUP_PUNCTUATIONS if punctuation == ","]
                )
                result_string_lower = "\n".join(
                    ["".join(punctuation + lowercase for lowercase in LOWERCASES) + punctuation for punctuation in FIRST_GROUP_PUNCTUATIONS if punctuation == ","]
                )
                concatenated_string_1 = result_string_upper + "\n" + result_string_lower + "\n"
            else:
                concatenated_string_1 = ""
    
            if ":" in FIRST_GROUP_PUNCTUATIONS:
                result_string_upper = "\n".join(
                    [''.join([uppercase + punctuation + ' ' for uppercase in UPPERCASES]) for punctuation in FIRST_GROUP_PUNCTUATIONS if punctuation == ":"]
                )
                result_string_lower = "\n".join(
                    [''.join([lowercase + punctuation + ' ' for lowercase in LOWERCASES]) for punctuation in FIRST_GROUP_PUNCTUATIONS if punctuation == ":"]
                )
                concatenated_string_2 = result_string_upper + "\n" + result_string_lower + "\n"
            else:
                concatenated_string_2 = ""
    
            if ";" in FIRST_GROUP_PUNCTUATIONS:
                result_string_upper = "\n".join(
                    [''.join([uppercase + punctuation + ' ' for uppercase in UPPERCASES]) for punctuation in FIRST_GROUP_PUNCTUATIONS if punctuation == ";"]
                )
                result_string_lower = "\n".join(
                    [''.join([lowercase + punctuation + ' ' for lowercase in LOWERCASES]) for punctuation in FIRST_GROUP_PUNCTUATIONS if punctuation == ";"]
                )
                concatenated_string_3 = result_string_upper + "\n" + result_string_lower + "\n"
            else:
                concatenated_string_3 = ""
    
            if "//" in FIRST_GROUP_PUNCTUATIONS and "\\" in FIRST_GROUP_PUNCTUATIONS:
                result_string_lower = "".join(lowercase + "//" + lowercase + "\\" + lowercase + " " for lowercase in LOWERCASES)
                result_string_upper = "".join(uppercase + "//" + uppercase + "\\" + uppercase + " " for uppercase in UPPERCASES)
                concatenated_string_4 = result_string_lower + "\n" + result_string_upper + "\n"
            else:
                concatenated_string_4 = ""
    
            if "¿" in FIRST_GROUP_PUNCTUATIONS and "?" in FIRST_GROUP_PUNCTUATIONS:
                result_string_upper = "".join("¿" + uppercase + "?" + " " for uppercase in UPPERCASES)
                result_string_lower = "".join("¿" + lowercase + "?" + " " for lowercase in LOWERCASES)
                concatenated_string_5 = result_string_upper + "\n" + result_string_lower + "\n"
            else:
                concatenated_string_5 = ""
    
            if "¡" in FIRST_GROUP_PUNCTUATIONS and "!" in FIRST_GROUP_PUNCTUATIONS:
                result_string_upper = "".join("¡" + uppercase + "!" + " " for uppercase in UPPERCASES)
                result_string_lower = "".join("¡" + lowercase + "!" + " " for lowercase in LOWERCASES)
                concatenated_string_6 = result_string_upper + "\n" + result_string_lower + "\n"
            else:
                concatenated_string_6 = ""
    
            if "“" in SECOND_GROUP_PUNCTUATIONS and "”" in SECOND_GROUP_PUNCTUATIONS:
                result_string_upper = "".join(uppercase + "“" + uppercase + "”" + uppercase + " " for uppercase in UPPERCASES)
                result_string_lower = "".join(lowercase + "“" + lowercase + "”" + lowercase + " " for lowercase in LOWERCASES)
                concatenated_string_7 = result_string_upper + "\n" + result_string_lower + "\n"
            else:
                concatenated_string_7 = ""
    
            if "‘" in SECOND_GROUP_PUNCTUATIONS and "’" in SECOND_GROUP_PUNCTUATIONS:
                result_string_upper = "".join(uppercase + "‘" + uppercase + "’" + uppercase + " " for uppercase in UPPERCASES)
                result_string_lower = "".join(lowercase + "‘" + lowercase + "’" + lowercase + " " for lowercase in LOWERCASES)
                result_string_extra_upper = "".join(uppercase + "’" for uppercase in UPPERCASES)
                result_string_extra_lower = "".join(lowercase + "’" for lowercase in LOWERCASES)
                concatenated_string_8 = result_string_upper + "\n" + result_string_lower + "\n" + result_string_extra_upper + "\n" + result_string_extra_lower + "\n"
            else:
                concatenated_string_8 = ""
    
            if "«" in SECOND_GROUP_PUNCTUATIONS and "»" in SECOND_GROUP_PUNCTUATIONS:
                result_string_upper = "".join(uppercase + "«" + uppercase + "»" + uppercase + " " for uppercase in UPPERCASES)
                result_string_lower = "".join(lowercase + "«" + lowercase + "»" + lowercase + " " for lowercase in LOWERCASES)
                concatenated_string_9 = result_string_upper + "\n" + result_string_lower + "\n"
            else:
                concatenated_string_9 = ""
    
            if "‹" in SECOND_GROUP_PUNCTUATIONS and "›" in SECOND_GROUP_PUNCTUATIONS:
                result_string_upper = "".join(uppercase + "‹" + uppercase + "›" + uppercase + " " for uppercase in UPPERCASES)
                result_string_lower = "".join(lowercase + "‹" + lowercase + "›" + lowercase + " " for lowercase in LOWERCASES)
                concatenated_string_10 = result_string_upper + "\n" + result_string_lower + "\n"
            else:
                concatenated_string_10 = ""
    
            if "(" in THIRD_GROUP_PUNCTUATIONS and ")" in THIRD_GROUP_PUNCTUATIONS:
                result_string_upper = "".join("(" + uppercase + ")" + " " for uppercase in UPPERCASES)
                result_string_lower = "".join("(" + lowercase + ")" + " " for lowercase in LOWERCASES)
                concatenated_string_11 = result_string_upper + "\n" + result_string_lower + "\n"
            else:
                concatenated_string_11 = ""
    
            if "{" in THIRD_GROUP_PUNCTUATIONS and "}" in THIRD_GROUP_PUNCTUATIONS:
                result_string_upper = "".join("{" + uppercase + "}" + " " for uppercase in UPPERCASES)
                result_string_lower = "".join("{" + lowercase + "}" + " " for lowercase in LOWERCASES)
                concatenated_string_12 = result_string_upper + "\n" + result_string_lower + "\n"
            else:
                concatenated_string_12 = ""
    
            if "[" in THIRD_GROUP_PUNCTUATIONS and "]" in THIRD_GROUP_PUNCTUATIONS:
                result_string_upper = "".join("[" + uppercase + "]" + " " for uppercase in UPPERCASES)
                result_string_lower = "".join("[" + lowercase + "]" + " " for lowercase in LOWERCASES)
                concatenated_string_13 = result_string_upper + "\n" + result_string_lower + "\n"
            else:
                concatenated_string_13 = ""

            if "–" in FOURTH_GROUP_PUNCTUATIONS:
                result_string_upper = "\n".join("".join(f"{punctuation}{uppercase}" for uppercase in UPPERCASES) + punctuation for punctuation in FOURTH_GROUP_PUNCTUATIONS if punctuation == "–")
                result_string_lower = "\n".join("".join(f"{punctuation}{lowercase}" for lowercase in LOWERCASES) + punctuation for punctuation in FOURTH_GROUP_PUNCTUATIONS if punctuation == "–")
                result_string_figures = "\n".join("".join(f"{punctuation}{figure}" for figure in FIGURES) + punctuation for punctuation in FOURTH_GROUP_PUNCTUATIONS if punctuation == "–")
                concatenated_string_14 = result_string_upper + "\n" + result_string_lower + "\n" + result_string_figures + "\n"
            else:
                concatenated_string_14 = ""

            if "." in FIRST_GROUP_PUNCTUATIONS:
                result_string_figures = "\n".join(
                    ["".join(punctuation + figure for figure in FIGURES) + punctuation for punctuation in FIRST_GROUP_PUNCTUATIONS if punctuation == "."]
                )
                concatenated_string_15 = result_string_figures + "\n" 
            else:
                concatenated_string_15 = ""

            if "," in FIRST_GROUP_PUNCTUATIONS:
                result_string_figures = "\n".join(
                    ["".join(punctuation + figure for figure in FIGURES) + punctuation for punctuation in FIRST_GROUP_PUNCTUATIONS if punctuation == ","]
                )
                concatenated_string_16 = result_string_figures + "\n" 
            else:
                concatenated_string_16 = ""
    
            Font.newTab(
                concatenated_string + concatenated_string_1 + concatenated_string_2 + concatenated_string_3 + concatenated_string_4 + concatenated_string_5 + concatenated_string_6 + concatenated_string_7 + concatenated_string_8 + concatenated_string_9 + concatenated_string_10 + concatenated_string_11 + concatenated_string_12 + concatenated_string_13 + concatenated_string_14 + concatenated_string_15 + concatenated_string_16)

    def symbol(self):
        if SYMBOLS == []:
            pass
        else:
            if "@" in SYMBOLS:
                result_string_upper = "".join("@" + uppercase for uppercase in UPPERCASES)
                result_string_lower = "".join("@" + lowercase for lowercase in LOWERCASE)
                concatenated_string = result_string_upper + "\n" + result_string_lower + "\n"
            else:
                concatenated_string = ""

            if "&" in SYMBOLS:
                result_string_upper = "".join("&" + uppercase for uppercase in UPPERCASES)
                result_string_lower = "".join("&" + lowercase for lowercase in LOWERCASE)
                concatenated_string_1 = result_string_upper + "\n" + result_string_lower + "\n"
            else:
                concatenated_string_1 = ""

            if "¶" in SYMBOLS:
                result_string_upper = "".join("¶" + uppercase for uppercase in UPPERCASES)
                result_string_lower = "".join("¶" + lowercase for lowercase in LOWERCASE)
                concatenated_string_2 = result_string_upper + "\n" + result_string_lower + "\n"
            else:
                concatenated_string_2 = ""

            if "©" in SYMBOLS:
                result_string_upper = "".join("©" + uppercase for uppercase in UPPERCASES)
                result_string_lower = "".join("©" + lowercase for lowercase in LOWERCASE)
                concatenated_string_3 = result_string_upper + "\n" + result_string_lower + "\n"
            else:
                concatenated_string_3 = ""

            if "®" in SYMBOLS:
                result_string_upper = "".join("®" + uppercase for uppercase in UPPERCASES)
                result_string_lower = "".join("®" + lowercase for lowercase in LOWERCASE)
                concatenated_string_4 = result_string_upper + "\n" + result_string_lower + "\n"
            else:
                concatenated_string_4 = ""

            if "℗" in SYMBOLS:
                result_string_upper = "".join("℗" + uppercase for uppercase in UPPERCASES)
                result_string_lower = "".join("℗" + lowercase for lowercase in LOWERCASE)
                concatenated_string_5 = result_string_upper + "\n" + result_string_lower + "\n"
            else:
                concatenated_string_5 = ""

            if "™" in SYMBOLS:
                result_string_upper = "".join("™" + uppercase for uppercase in UPPERCASES)
                result_string_lower = "".join("™" + lowercase for lowercase in LOWERCASE)
                concatenated_string_6 = result_string_upper + "\n" + result_string_lower + "\n"
            else:
                concatenated_string_6 = ""

            # Generate the result string using nested comprehensions
            concatenated_string_7 = "\n".join("".join(f"{symbol}{num}" for num in FIGURES) + symbol for symbol in MATH_SYMBOLS)

            Font.newTab(
            concatenated_string + concatenated_string_1 + concatenated_string_2 + concatenated_string_3 + concatenated_string_4 + concatenated_string_5 + concatenated_string_6 + concatenated_string_7
            )

if __name__ == "__main__":
    SpacingPairs()
