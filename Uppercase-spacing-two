import vanilla

class SpacingPairs:

    def __init__(self):
        self.windowWidth = 333
        self.windowHeight = 145
        self.windowWidthResize = 100  # user can resize width by this value
        self.windowHeightResize = 100  # user can resize height by this value

        self.w = vanilla.FloatingWindow(
            (self.windowWidth, self.windowHeight),  # default window size
            "Pairs Generator",  # window title
            minSize=(self.windowWidth, self.windowHeight),  # minimum size
            maxSize=(self.windowWidth + self.windowWidthResize, self.windowHeight + self.windowHeightResize),  # maximum size
        )

        # UI elements:
        self.w.uppercase = vanilla.CheckBox(
            (15, 15, 75, 22), "Uppercase", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.lowercase = vanilla.CheckBox(
            (100, 15, 75, 22), "Lowercase", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.number = vanilla.CheckBox(
            (185, 15, 75, 22), "Number", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.currency = vanilla.CheckBox(
            (253, 15, 75, 22), "Currency", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.allUpper = vanilla.CheckBox(
            (15, 40, 90, 22), "All Uppercase", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.allLower = vanilla.CheckBox(
            (118, 40, 90, 22), "All Lowercase", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.UppervsLower = vanilla.CheckBox(
            (220, 40, 100, 22), "Upper vs Lower", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.PunctuationLetter = vanilla.CheckBox(
            (15, 66, 115, 22), "Punctuation Letter", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.PunctuationNumber = vanilla.CheckBox(
            (145, 66, 125, 22), "Punctuation Number", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.All = vanilla.CheckBox(
            (285, 66, 60, 22), "All", sizeStyle="small", callback=self.checkbox_callback
        )
        self.w.pairsButton = vanilla.Button(
            (10, 100, -10, 22), "Generate", sizeStyle="regular", callback=self.button_callback
        )

        self.w.open()  # Open the window
        self.w.makeKey()  # Focus on window

    def checkbox_callback(self, sender):
        # This function can be used to handle checkbox state changes if needed
        pass

    def button_callback(self, sender):
        # This method is called when the button is pressed.
        if self.w.uppercase.get():
            self.uppercase_spacing()
        if self.w.lowercase.get():
            self.lowercase_spacing()
        if self.w.number.get():
            self.figure_spacing()
        if self.w.currency.get():
            self.currency_spacing()
        if self.w.allUpper.get():
            self.all_uppercase_spacing()
        if self.w.allLower.get():
            self.all_lowercase_spacing()
        if self.w.UppervsLower.get():
            self.upper_lower()

        # Functions:
    def uppercase_spacing(self):
        # List of uppercase characters
        uppercase = [chr(i) for i in range(65, 91)]

        # Concatenate all results into a single string
        result_string = "\n".join(["HH" + character + "HH"+ " " "OO" + character + "OO" for character in uppercase])

        Font.newTab(result_string)

    def lowercase_spacing(self):
        # List of lowercase characters
        lowercase = [chr(i) for i in range(97, 123)]

        # Concatenate all results into a single string
        result_string = "\n".join(["nn" + character + "nn"+ " " "oo" + character + "oo" for character in lowercase])

        Font.newTab(result_string)

    def figure_spacing(self):
        # List of figures
        figures = [chr(i) for i in range(48, 58)]

        # Concatenate all results into a single string
        result_string = "\n".join([character + "1" + character + "2" + character + "3" + character + "4" + character + "5" +     character + "6" + character + "7" + character + "8" + character + "9" + character for character in figures])

        # Display the result string in a new tab
        Font.newTab(result_string)

    def currency_spacing(self):
        # List of currencies
        currency = ["\u0192", "\u0E3F", "\u20BF", "\u00A2", "\u00A4", "\u0024", "\u20AC", "\u20B4", "\u20A4", "\u20BA", "\u20A7", "\u20BD", "\u20B9", "\u20AA", "\u00A3", "\u20B8", "\u20AE", "\u20A9", "\u00A5"]

        # Concatenate all results into a single string
        result_string = "\n".join(
        "12" + character + " 23" + character + " 34" + character + " 45" + character + " 56" + character + " 67" + character + " 78" + character + " 89" + character + " 90" + character + " 01" + character if character == "\u00A2"
        else character + "12 " + character + "23 " + character + "34 " + character + "45 " + character + "56 " + character + "67 " + character + "78 " + character + "89 " + character + "90 " + character + "01"
        for character in currency
    	)

        # Display the result string in a new tab
        Font.newTab(result_string)

    def all_uppercase_spacing(self):
        # List of uppercase characters
        uppercase = [chr(i) for i in range(65, 91)]

        # Concatenate all results into a single string
        result_string = "\n".join([character + "A" + character + "B" + character + "C" + character + "D" + character + "E" + character + "F" + character + "G" + character + "H" + character + "I" + character + "J" + character + "K" + character + "L" + character + "M" + character + "N" + character + "O" + character + "P" + character + "Q" + character + "R" + character + "S" + character + "T" + character + "U" + character + "V" + character + "W" + character + "X" + character + "Y" + character + "Z" + character for character in uppercase])

        Font.newTab(result_string)

    def all_lowercase_spacing(self):
        # List of lowercase characters
        lowercase = [chr(i) for i in range(97, 123)]

        # Concatenate all results into a single string
        result_string = "\n".join([character + "a" + character + "b" + character + "c" + character + "d" + character + "e" + character + "f" + character + "g" + character + "h" + character + "i" + character + "j" + character + "k" + character + "l" + character + "m" + character + "n" + character + "o" + character + "p" + character + "q" + character + "r" + character + "s" + character + "t" + character + "u" + character + "v" + character + "w" + character + "x" + character + "y" + character + "z" + character for character in lowercase])

        Font.newTab(result_string)

    def upper_lower(self):
        # List of lowercase characters
        lowercase = [chr(i) for i in range(97, 123)]

        # List of uppercase characters
        uppercase = [chr(i) for i in range(65, 91)]

        # Initialize an empty string to hold all combinations
        all_combinations = ""

        # Create a combined string for each uppercase letter and append it to all_combinations
        for upper in uppercase:
            combined_string = "".join([upper + char + "nnon " for char in lowercase])
            all_combinations += combined_string + "\n"  # Add a newline for each uppercase block

        # Open a new tab with all the combinations
        Font.newTab(all_combinations)

if __name__ == "__main__":
    SpacingPairs()

